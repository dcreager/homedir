#!/ports/bin/perl

use strict;
use warnings;

use Getopt::Std;
use Mac::Growl      qw( :all );
use Readonly;
use Storable;

Readonly my $DATA_FILENAME => "$ENV{'HOME'}/var/battnotify";
Readonly my $IOREG_COMMAND => 'ioreg -r -c AppleSmartBattery -l -w0';
Readonly my $ICON_FILENAME => "$ENV{'HOME'}/etc/icons/battnotify.icns";
Readonly my $GROWL_NAME    => 'Battery Notifier';
Readonly my $GROWL_APPICON => 'Activity Monitor';
Readonly my $GROWL_TYPES   => [ 'update', 'low update' ];


my $details;
my $do_alert;
my %opt;
my $pipe;
my $previous = {
        on_mains  => 1,
        current   => 6000,
        capacity  => 6000,
        remaining => 500,
    };

eval {
    $previous = retrieve $DATA_FILENAME;
};

RegisterNotifications( 
        $GROWL_NAME, 
        $GROWL_TYPES, 
        $GROWL_TYPES, 
        $GROWL_APPICON 
    );

getopts( 'a', \%opt );

open $pipe, "$IOREG_COMMAND |"
    or die;
    
while ( my $line = <$pipe> ) {
    my $find_item_regexp = qr{
            ^
            \s+
        
            "(\w+)"
        
            [ ][=][ ]
        
            (.*)
        
            \s*
            $
        }x;
    
    if ( $line =~ $find_item_regexp ) {
        my $item  = $1;
        my $value = $2;
        
        if ( 'ExternalConnected' eq $item ) {
            $details->{'on_mains'} = ( 'Yes' eq $value );
        }
        
        if ( 'CurrentCapacity' eq $item ) {
            $details->{'current'} = $value;
        }
        
        if ( 'MaxCapacity' eq $item ) {
            $details->{'capacity'} = $value;
        }
        
        if ( 'TimeRemaining' eq $item ) {
            $details->{'remaining'} = $value;
        }
    }
}

$details->{'percentage'} = $details->{'current'} / $details->{'capacity'};
$details->{'hours'     } = int( $details->{'remaining'} / 60 );
$details->{'minutes'   } = int( $details->{'remaining'} % 60 );



if ( !$details->{'on_mains'} ) {
    $do_alert = has_crossed_threshold();
}

# -a means always alert
$do_alert += defined $opt{'a'};

alert()  if $do_alert;

store $details, $DATA_FILENAME
    or die "$DATA_FILENAME: $!";
exit;


sub has_crossed_threshold {
    my $this =  $details->{'remaining'};
    my $last = $previous->{'remaining'};
    
    my @thresholds = (
              5,  10,  15, 20, 25, 30,  45,         # last hour has more,
             60,       75,              90, 105,    # every hour does 
            120,      135,             150, 165,    # 15, 30, 45, and 60
            180,      195,             210, 225,
            240,      255,             270, 285,
            300,      315,             330, 345,    # >5 hours silly value
        );
    
    my $threshold = shift @thresholds;

    THRESHOLD:
    while ( $threshold ) {
        return 1  if $this      <= $threshold 
                  && $threshold  < $last;
                
        last THRESHOLD  if $this < $threshold;
        
        $threshold = shift @thresholds;
    }
    return;
}


sub alert {
    my $update_type = 'update';
    my $priority    = 0;
    my $sticky      = 0;
    my $percentage  = sprintf '%02d', 
                              ( $details->{'percentage'} * 100 );
    my $time_left   = sprintf '%d:%02d',
                              $details->{'hours'},
                              $details->{'minutes'};
    my $icon_file   = -f $ICON_FILENAME
                          ? $ICON_FILENAME
                          : undef;
    
    
    if ( $details->{'hours'} < 1 ) {
        $update_type = 'low update';
        $priority    = 2;
        $sticky      = 1;
    }
    if ( $percentage < 10 ) {
        $priority = 2;
        $sticky   = 1;
    }

    PostNotification(
            $GROWL_NAME, 
            $update_type, 
            "Battery at ${percentage}%",
            "The battery has $time_left remaining.\n",
            $sticky,
            $priority,
            $icon_file
        );
}

__END__

=pod

=head1 NAME

B<battnotify> - intermittent growl notifications of remaining battery life

=head1 OPTIONS

=over

=item -a

always trigger the notification

=back

=head1 DESCRIPTION

B<battnotify> sends a growl notification of the remaining battery life 
at certain intervals. 

If there is more than an hour of battery life left, it will trigger growl
every 15 minutes.

In the last hour of battery life, growl notifications will be set to B<high>
priority and trigger extra notifications when there are only 20, 10 and 5
minutes remaining.

=head1 AUTHOR

Mark Norman Francis L<http://marknormanfrancis.com/>
